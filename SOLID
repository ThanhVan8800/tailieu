rong ngữ cảnh lập trình, Solid là một nguyên tắc thiết kế phần mềm quan trọng, viết tắt của năm nguyên tắc SOLID. Đây là một tập hợp các nguyên tắc thiết kế linh hoạt giúp xây dựng các hệ thống phần mềm dễ bảo trì, mở rộng và tái sử dụng. Mỗi chữ cái trong SOLID đại diện cho một nguyên tắc cụ thể:

S - Single Responsibility Principle (Nguyên tắc đơn trách nhiệm): Một lớp nên chỉ có một lý do để thay đổi. Nói cách khác, một lớp nên chỉ chịu trách nhiệm duy nhất và không nên có quá nhiều lý do để thay đổi.

O - Open-Closed Principle (Nguyên tắc đóng mở): Một lớp nên mở cho việc mở rộng, nhưng đóng cho việc sửa đổi. Điều này có nghĩa là bạn nên có thể mở rộng chức năng của một lớp mà không cần sửa đổi mã nguồn gốc.

L - Liskov Substitution Principle (Nguyên tắc thay thế Liskov): Các đối tượng của một lớp con có thể thay thế các đối tượng của lớp cơ sở mà không làm thay đổi tính đúng đắn của chương trình.

I - Interface Segregation Principle (Nguyên tắc phân tách giao diện): Nên ưu tiên sử dụng nhiều giao diện nhỏ hơn là một giao diện lớn. Nguyên tắc này khuyến khích chia nhỏ các giao diện thành các phần tử nhỏ hơn, giúp tránh việc triển khai các phương thức không cần thiết trong một lớp.

D - Dependency Inversion Principle (Nguyên tắc phụ thuộc đảo ngược): Các module cấp cao không nên phụ thuộc vào các module cấp thấp, cả hai nên phụ thuộc vào trừu tượng. Nguyên tắc này khuyến khích sử dụng các phụ thuộc trừu tượng (interface hay abstract class) để giảm sự ràng buộc giữa các lớp cụ thể.
